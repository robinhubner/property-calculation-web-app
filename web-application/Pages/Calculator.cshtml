@page
@model CalculatorModel
@{
    ViewData["Title"] = "immovestion";
}

<head>
    <link rel="icon" type="image/png" href="~/images/favicon.png">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Immobilienkalkulator</title>
    <script src="
    https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js
    "></script>
    <style>
        body {
            display: flex;
            justify-content: center;
            /* Zentriert horizontal */
            align-items: flex-start;
            /* Startet am oberen Rand des Viewports */
            min-height: 100vh;
            padding: 20px 0;
            /* Gibt etwas Raum oben und unten */
        }

        .header-bar {
            background-color: #0E2442;
            /* Dark blue background */
            color: white;
            /* White text color */
            padding: 10px 20px;
            /* Padding for some spacing around the text */
            margin-top: 20px;
            /* Top margin for spacing from other elements */
            border-radius: 5px;
            /* Rounded corners for aesthetics */
            text-align: center;
            /* Center the text within the bar */
            font-size: 1.2em;
            /* Slightly larger text for headers */
        }

        .container {
            text-align: center;
            padding: 20px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            width: 95%;
            max-width: 800px;
        }

        .logo-container {
            background-color: #0E2442;
            /* Background color for the logo container */
            padding: 10px 0;
            /* Padding around the logo */
            margin-bottom: 30px;
            /* Weißer Abstand unter dem Container */
        }

        .logo {
            width: 250px;
            /* Fixed width for the logo */
            margin: auto;
            /* Center the logo horizontally */
        }

        .cta {
            margin-bottom: 20px;
            font-size: 1.5em;
            color: #000000;
            /* Text color set to black */
        }

        form {
            display: grid;
            gap: 10px;
            justify-content: center;
        }

        input,
        select {
            padding: 10px;
            width: 100%;
            box-sizing: border-box;
            border-radius: 5px;
            border: 1px solid #ccc;
            color: #000000;
            /* Text color for inputs */
        }

        button {
            padding: 10px 20px;
            font-size: 1em;
            color: white;
            background-color: #0E2442;
            /* Button color set to logo color */
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #092c3f;
            /* Darker shade for button hover state */
        }

        form {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            /* Erzeugt zwei Spalten */
            gap: 20px;
            /* Abstand zwischen den Spalten und Zeilen */
            margin: 20px 0;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="logo-container">
            <img src="/images/logo.png" alt="Logo" class="logo">
        </div>
        <div class="cta">Jetzt mit IMMOVESTION präzise, schnell und AI-unterstützt, das nächste Immobilieninvestment kalkulieren. </div>
        <!-- Input header bar -->
        <div class="header-bar">
            Eingabe
        </div>
        <form method="post">
            <input type="text" asp-for="Property.PropertyName" placeholder="Name des Objektes" value="Musterobjekt"
                required>
            <input type="text" id="startPeriodInput" placeholder="YYYY-MM" pattern="\d{4}-(0[1-9]|1[0-2])"
                value="2024-01" required>
            <input type="number" id="purchasePrice" asp-for="Property.PurchasePrice" placeholder="Kaufpreis"
                value="500000" required>
            <input type="number" id="equity" asp-for="Property.Equity" placeholder="Eigenkapital" value="50000"
                required>
            <input type="number" placeholder="Gewünschte monatliche Rate" value="5000" required>
            <select asp-for="Property.Purpose" required>
                <option value="">Zweck der Immobilie</option>
                <option value="self_use">Eigennutzung</option>
                <option value="rental">Vermietung</option>
            </select>
            <input type="number" asp-for="Property.ExpectedRent"
                placeholder="Erwartete Mieteinnahmen (falls Vermietung)" value="1000">
            <input type="number" id="loanTerm" asp-for="Property.LoanTerm"
                placeholder="Laufzeit des Kredits (in Jahren)" value="5" required>
            <input type="number" id="interestRate" asp-for="Property.InterestRate"
                placeholder="Zinssatz des Kredits p.a. (%)" value="3.6" required>
            <input type="number" asp-for="Property.TotalArea" placeholder="Gesamtfläche in m²" value="100" required>
            <button type="button" onclick="updateChart()" onclick="validateInput()"
                asp-page-handler="Calculate">Berechnen</button>
            <button type="submit" asp-page-handler="Clear">Eingaben zurücksetzen</button>
        </form>
        <div class="header-bar">
            Resultate
        </div>
        <div>
            <label>Kosten je Quadratmeter: </label>
            <span>@Model.CostPerSquareMeter €/m²</span>
        </div>

    </div>
    <button id="toggleMonthly">Monatsansicht</button>
    <button id="toggleYearly">Jahresansicht</button>
    <button onclick="toggleDataset(0)">Restschuld</button>
    <button onclick="toggleDataset(1)">Zinsen</button>
    <button onclick="toggleDataset(2)">Tilgung</button>
    <div style="width: 800px;"><canvas id="NetPresentValueChart"></canvas></div>
    <div class="header-bar">
        AI Bankberater fragen
    </div>
    <div class="header-bar">
        AI Steuerberater fragen
    </div>
    <div class="header-bar">
        AI Architekten fragen
    </div>
</body>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const ctx = document.getElementById('NetPresentValueChart').getContext('2d');
        const NetPresentValueChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [],  // This represents the label for your data point
                datasets: [{
                    label: 'Restschuld',  // Label for Remaining Debt
                    data: [],  // Data points for Remaining Debt
                    backgroundColor: 'rgba(14, 36, 66, 0.2)',  // Soft blue based on the corporate color
                    borderColor: '#0E2442',  // Corporate blue color
                    borderWidth: 2,  // Slightly thicker border for better visibility
                    pointBackgroundColor: '#0E2442',  // Points color
                    pointBorderColor: '#fff',  // White borders for the points
                    pointBorderWidth: 1,  // Border width of the points
                    pointRadius: 3,  // Radius of the points
                    fill: true  // Fill the area under the line
                }, {
                    label: 'Zinsen',  // Label for Interest
                    data: [],  // Data points for Interest
                    backgroundColor: 'rgba(14, 36, 66, 0.5)',  // Slightly more opaque for distinction
                    borderColor: '#0E2442',
                    borderWidth: 2,
                    pointBackgroundColor: '#0E2442',
                    pointBorderColor: '#fff',
                    pointBorderWidth: 1,
                    pointRadius: 3,
                    fill: true
                }, {
                    label: 'Tilgung',  // Label for Amortization
                    data: [],  // Data points for Amortization
                    backgroundColor: 'rgba(14, 36, 66, 0.8)',  // Even more opaque to distinguish easily
                    borderColor: '#0E2442',
                    borderWidth: 2,
                    pointBackgroundColor: '#0E2442',
                    pointBorderColor: '#fff',
                    pointBorderWidth: 1,
                    pointRadius: 3,
                    fill: true
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        window.updateChart = function () {
            console.log("updateChart called");
            const startPeriodInputValue = new Date(startPeriodInput.value);
            const interestRate = document.getElementById("interestRate").value / 100;
            const loanTermInput = document.getElementById('loanTerm');
            const equityInputValue = document.getElementById('equity').value;
            const purchasePriceInputValue = document.getElementById('purchasePrice').value;
            const debt = purchasePriceInputValue - equityInputValue;
            const totalPeriods = loanTermInput.value * 12;
            let periods = [];
            let interestPayment = [];
            let remainingDebt = [];
            let amortization = [];
            for (let i = 0; i < totalPeriods; i++) {
                let currentPeriod = new Date(startPeriodInputValue);
                currentPeriod.setMonth(startPeriodInputValue.getMonth() + i);
                periods.push((currentPeriod.toLocaleDateString()).toString());  // Add each year as a string to the array
            }
            for (let i = 0; i < totalPeriods; i++) {
                let currentRemainingDebt = 10000;
                if (i == 0) {
                    currentRemainingDebt = 50000;
                } else {
                    currentRemainingDebt = remainingDebt[i - 1] - amortization[i - 1];
                }
                let currentInterestPayment = (interestRate * currentRemainingDebt / 12);
                let currentAmortization = 1000 - currentInterestPayment;

                interestPayment.push(currentInterestPayment);
                amortization.push(currentAmortization);
                remainingDebt.push(currentRemainingDebt);
            }
            NetPresentValueChart.data.labels = periods;
            NetPresentValueChart.data.datasets[0].data = remainingDebt;
            NetPresentValueChart.data.datasets[1].data = interestPayment;
            NetPresentValueChart.data.datasets[2].data = amortization;
            NetPresentValueChart.update();
        };

        // Function to toggle datasets
        function toggleDataset(datasetIndex) {
            var dataset = NetPresentValueChart.data.datasets[datasetIndex];
            dataset.hidden = !dataset.hidden; // Toggle visibility
            NetPresentValueChart.update(); // Update chart to reflect the change
        }
    });
</script>

<script>
    function validateInput() {
        var input = document.getElementById('yearMonth').value;
        var regex = /^\d{4}-(0[1-9]|1[0-2])$/;

        if (regex.test(input)) {
            alert("Valid Input!");
        } else {
            alert("Invalid Input. Please enter the date in YYYY-MM format.");
        }
    }
</script>
